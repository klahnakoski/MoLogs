{
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "classifiers": [
        "Development Status :: 4 - Beta",
        "Topic :: Software Development :: Libraries",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6"
    ],
    "description": "More Logs! Structured Logging and Exception Handling",
    "include_package_data": true,
    "install_requires": ["mo-dots>=3.63.20108", "mo-future>=3.51.20059"],
    "license": "MPL 2.0",
    "long_description": {
        "$concat": [
            "\r",
            "# More Logs - Structured Logging and Exception Handling\r",
            "\r",
            "\r",
            "|Branch      |Status   |\r",
            "|------------|---------|\r",
            "|master      | [![Build Status](https://travis-ci.org/klahnakoski/mo-logs.svg?branch=master)](https://travis-ci.org/klahnakoski/mo-logs) |\r",
            "|dev         | [![Build Status](https://travis-ci.org/klahnakoski/mo-logs.svg?branch=dev)](https://travis-ci.org/klahnakoski/mo-logs)  [![Coverage Status](https://coveralls.io/repos/github/klahnakoski/mo-logs/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-logs?branch=dev)  |\r",
            "\r",
            "\r",
            "This library provides two main features\r",
            "\r",
            "* **Structured logging** - output is all JSON (with options to serialize to text for humans)\r",
            "* **Exception handling weaved in** - Good logs must represent what happened,\r",
            "and that can only be done if the logging library is intimately familiar with\r",
            "the (exceptional) code paths taken.\r",
            "\r",
            "## Motivation\r",
            "\r",
            "Exception handling and logging are undeniably linked. There are many instances\r",
            "where exceptions are raised and must be logged, and others where the subsuming \r",
            "system can fully handle the exception, and no log should be emitted. Exception \r",
            "handling semantics are great because they decouple the cause from the solution, \r",
            "but this can be at odds with clean logging - which couples raising and catching \r",
            "to make appropriate decisions about what to emit to the log.  \r",
            "\r",
            "This logging module is additionally responsible for raising exceptions,\r",
            "collecting the trace and context, and then deducing if it must be logged, or\r",
            "if it can be ignored because something can handle it.\r",
            "\r",
            "\r",
            "## Basic Usage\r",
            "\r",
            "### Use `Log.note()` for all logging\r",
            "\r",
            "```python\r",
            "    Log.note(\"Hello, World!\")\r",
            "```\r",
            "\r",
            "There is no need to create logger objects. The `Log` module will keep track of\r",
            "what, where and when of every call.\r",
            "\r",
            "### Using named parameters\r",
            "\r",
            "All logging calls accept a string template with named parameters. Keyword arguments\r",
            "can be added to the call to provide values. The template and arguments are not \r",
            "combined at call time, rather they are held in a JSON-izable data structure for \r",
            "structured logging. The template is only expanded *if* the log is serialized for humans.  \r",
            "\r",
            "```python\r",
            "    Log.note(\"Hello, {{name}}!\", name=\"World!\")\r",
            "```\r",
            "\r",
            "**Do not use Python's string formatting features:**\r",
            " \r",
            "* [string formatting operator (`%`)](http://python-reference.readthedocs.io/en/latest/docs/str/formatting.html), \r",
            "* [the `format()` function](https://docs.python.org/3/library/stdtypes.html#str.format) \r",
            "* [literal string intrpolation](https://www.python.org/dev/peps/pep-0498/).\r",
            "\r",
            "Using any of these will expand the string template at call time, which is a parsing\r",
            "nightmare for log analysis tools.\r",
            "\r",
            "\r",
            "### Parametric parameters\r",
            "\r",
            "All the `Log` functions accept a `default_params` as a second parameter, like so:\r",
            "\r",
            "```python\r",
            "    Log.note(\"Hello, {{name}}!\", {\"name\": \"World!\"})\r",
            "```\r",
            "\r",
            "this is meant for the situation your code already has a bundled structure you\r",
            "wish to use as a source of parameters. If keyword parameters are used, they\r",
            "will override the default values. Be careful when sending whole data\r",
            "structures, they will be logged!\r",
            "\r",
            "### Formatting parameters\r",
            "\r",
            "There are a variety of formatters, and they can be applied by using the \r",
            "pipe (`|`) symbol.  \r",
            "\r",
            "In this example we cast the `name` to uppercase\r",
            "\r",
            "```python\r",
            "    Log.note(\"Hello, {{name|upper}}!\", name=\"World!\")\r",
            "```\r",
            "\r",
            "Some formatters accept arguments:\r",
            "\r",
            "```python\r",
            "    Log.note(\"pi is {{pi|round(places=3)}}!\", pi=3.14159265)\r",
            "```\r",
            "\r",
            "You can look at the [`strings` module](https://github.com/klahnakoski/mo-logs/blob/dev/mo_logs/strings.py#L56) to see the formatters available.\r",
            "\r",
            "### Please, never use locals()\r",
            "\r",
            "```python\r",
            "    def worker(value):\r",
            "        name = \"tout le monde!\"\r",
            "        password = \"123\"\r",
            "        Log.note(\"Hello, {{name}}\", locals())      # DO NOT DO THIS!\r",
            "```\r",
            "\r",
            "Despite the fact using `locals()` is a wonderful shortcut for logging it is\r",
            "dangerous because it also picks up sensitive local variables. Even if\r",
            "`{{name}}` is the only value in the template, the whole `locals()` dict will\r",
            "be sent to the structured loggers for recording. \r",
            "\r",
            "### Destination: Database!\r",
            "\r",
            "All logs are structured logs; the parameters will be included, unchanged, in\r",
            "the log structure. This library also expects all parameter values to be JSON-\r",
            "serializable so they can be stored/processed by downstream JSON tools.\r",
            "\r",
            "**Example structured log** \r",
            "```json\r",
            "    {\r",
            "        \"template\": \"Hello, {{name}}!\",\r",
            "        \"params\": {\"name\": \"World!\"},\r",
            "        \"context\": \"NOTE\",\r",
            "        \"format\": \"{{machine.name}} (pid {{machine.pid}}) - {{timestamp|datetime}} - {{thread.name}} - \\\"{{location.file}}:{{location.line}}\\\" - ({{location.method}}) - Hello, {{params.name}}!\",\r",
            "        \"location\": {\r",
            "            \"file\": \"/home/kyle/code/example.py\",\r",
            "            \"line\": 10,\r",
            "            \"method\": \"worker\"\r",
            "        },\r",
            "        \"machine\": {\r",
            "            \"name\": \"klahnakoski-39477\",\r",
            "            \"os\": \"Windows10\",\r",
            "            \"pid\": 18060,\r",
            "            \"python\": \"CPython\"\r",
            "        },\r",
            "        \"thread\": {\r",
            "            \"id\": 14352,\r",
            "            \"name\": \"Main Thread\"\r",
            "        },\r",
            "        \"timestamp\": 1578673471\r",
            "    }\r",
            "```\r",
            "\r",
            "## Exception Handling\r",
            "\r",
            "### Instead of `raise` use `Log.error()`\r",
            "\r",
            "```python\r",
            "    Log.error(\"This will throw an error\")\r",
            "```\r",
            "\r",
            "The actual call will always raise an exception, and it manipulates the stack\r",
            "trace to ensure the caller is appropriately blamed. Feel free to use the\r",
            "`raise` keyword (as in `raise Log.error(\"\")`), if that looks nicer to you. \r",
            "\r",
            "### Always chain your exceptions\r",
            "\r",
            "The `cause` parameter accepts an `Exception`, or a list of exceptions.\r",
            "Chaining is generally good practice that helps you find the root cause of\r",
            "a failure. \r",
            "\r",
            "```python\r",
            "    try:\r",
            "        # Do something that might raise exception\r",
            "    except Exception as e:\r",
            "        Log.error(\"Describe what you were trying to do\", cause=e)\r",
            "```\r",
            "\r",
            "### Use named parameters in your error descriptions too\r",
            "\r",
            "Error logging accepts keyword parameters just like `Log.note()` does\r",
            "\r",
            "```python\r",
            "    def worker(value):\r",
            "        try:\r",
            "            Log.note(\"Start working with {{key1}}\", key1=value1)\r",
            "            # Do something that might raise exception\r",
            "        except Exception as e:\r",
            "            Log.error(\"Failure to work with {{key2}}\", key2=value2, cause=e)\r",
            "```\r",
            "\r",
            "### No need to formally type your exceptions\r",
            "\r",
            "An exception can be uniquely identified by the message template\r",
            "it is given; exceptions raised with the same template are the same type. You\r",
            "should have no need to create new exception types.\r",
            "\r",
            "### Testing for exception \"types\"\r",
            "\r",
            "This library advocates chaining exceptions early and often, and this hides\r",
            "important exception types in a long causal chain. `mo-logs` allows you to easily\r",
            "test if a type (or string, or template) can be found in the causal chain by using\r",
            "the `in` keyword:   \r",
            "\r",
            "```python\r",
            "    def worker(value):\r",
            "        try:\r",
            "            # Do something that might raise exception\r",
            "        except Exception as e:\r",
            "            if \"Failure to work with {{key2}}\" in e:\r",
            "                # Deal with exception thrown in above code, no matter\r",
            "                # how many other exception handlers were in the chain\r",
            "```\r",
            "\r",
            "For those who may abhor the use of magic strings, feel free to use constants instead:\r",
            "\r",
            "```python\r",
            "    KEY_ERROR = \"Failure to work with {{key}}\"\r",
            "\r",
            "    try:\r",
            "        Log.error(KEY_ERROR, key=42)        \r",
            "    except Exception as e:\r",
            "        if KEY_ERROR in e:\r",
            "            Log.note(\"dealt with key error\")\r",
            "```\r",
            "\r",
            "\r",
            "\r",
            "\r",
            "### If you can deal with an exception, then it will never be logged\r",
            "\r",
            "When a caller catches an exception from a callee, it is the caller's\r",
            "responsibility to handle that exception, or re-raise it. There are many\r",
            "situations a caller can be expected to handle exceptions; and in those cases\r",
            "logging an error would be deceptive. \r",
            "\r",
            "```python\r",
            "    def worker(value):\r",
            "        try:\r",
            "            Log.error(\"Failure to work with {{key3}}\", key3=value3)\r",
            "        except Exception as e:\r",
            "            # Try something else\r",
            "```\r",
            "\r",
            "### Use `Log.warning()` if your code can deal with an exception, but you still want to log it as an issue\r",
            "\r",
            "```python\r",
            "    def worker(value):\r",
            "        try:\r",
            "            Log.note(\"Start working with {{key4}}\", key4=value4)\r",
            "            # Do something that might raise exception\r",
            "        except Exception as e:\r",
            "            Log.warning(\"Failure to work with {{key4}}\", key4=value4, cause=e)\r",
            "```\r",
            "### Don't loose your stack trace!\r",
            "\r",
            "Be aware your `except` clause can also throw exceptions: In the event you\r",
            "catch a vanilla Python Exception, you run the risk of loosing its stack trace.\r",
            "To prevent this, wrap your exception in an `Except` object, which will capture\r",
            "your trace for later use. Exceptions thrown from this `Log` library need not\r",
            "be wrapped because they already captured their trace. If you wrap an `Except`\r",
            "object, you simply get back the object you passed.\r",
            "\r",
            "\r",
            "```python\r",
            "    try:\r",
            "        # DO SOME WORK        \r",
            "    except Exception as e:\r",
            "        e = Except.wrap(e)\r",
            "        # DO SOME FANCY ERROR RECOVERY\r",
            " ```\r",
            "\r",
            "### Always catch all `Exceptions`\r",
            "\r",
            "Catching all exceptions is preferred over the *only-catch-what-you-can-handle*\r",
            "strategy. First, exceptions are not lost because we are chaining. Second,\r",
            "we catch unexpected `Exceptions` early and we annotate them with a\r",
            "description of what the local code was intending to do. This annotation\r",
            "effectively groups the possible errors (known, or not) into a class, which\r",
            "can be used by callers to decide on appropriate mitigation.  \r",
            "\r",
            "To repeat: When using dependency injection, callers can not reasonably be\r",
            "expected to know about the types of failures that can happen deep down the\r",
            "call chain. This makes it vitally important that methods summarize all\r",
            "exceptions, both known and unknown, so their callers have the information to\r",
            "make better decisions on appropriate action.  \r",
            "\r",
            "For example: An abstract document container, implemented on top of a SQL \r",
            "database, should not emit SQLExceptions of any kind: A caller that uses a \r",
            "document container should not need to know how to handle SQLExceptions (or any \r",
            "other implementation-specific exceptions). Rather, in this example, the \r",
            "caller should be told it \"can not add a document\", or \"can not remove a \r",
            "document\". This allows the caller to make reasonable decisions when they do \r",
            "occur. The original cause (the SQLException) is in the causal chain.\r",
            "\r",
            "Another example, involves *nested exceptions*: If you catch a particular type \r",
            "of exception, you may inadvertently catch the same type of exception \r",
            "from deeper in the call chain. Narrow exception handling is an illusion. \r",
            "Broad exception handling will force you to consider a variety of failures \r",
            "early; force you to consider what it means when a block of code fails; and \r",
            "force you to describe it for others.\r",
            "\r",
            "### Don't make methods you do not need\r",
            "\r",
            "There is an argument that suggests you should break your code into logical methods, rather than catching exceptions: The method name will describe action that failed, and the stack trace can be inspected to make mitigation decisions. Additional methods is a poor solution:\r",
            "\r",
            "* More methods means more complexity; the programmer must find the method, remember the method, and wonder if the method is used elsewhere.\r",
            "* Methods can be removed while refactoring; exceptions make it clear the error is important\r",
            "* Compiler optimizations can interfere with the call stack\r",
            "* The method name is not an appropriate description of the problem: Many words may be required for clarity.\r",
            "* Code that inspects its own stack trace is messy code.\r",
            "* A stack trace does not include runtime values that are vital for describing the problem.\r",
            "\r",
            "\r",
            "## Log 'Levels'\r",
            "\r",
            "The `mo-logs` module has no concept of logging levels it is expected that debug\r",
            "variables (variables prefixed with `DEBUG_` are used to control the logging\r",
            "output.\r",
            "\r",
            "\r",
            "```python\r",
            "    # simple.py\r",
            "    DEBUG_SHOW_DETAIL = True\r",
            "\r",
            "    def worker():\r",
            "        if DEBUG_SHOW_DETAIL:\r",
            "            Log.note(\"Starting\")\r",
            "\r",
            "        # DO WORK HERE\r",
            "\r",
            "        if DEBUG_SHOW_DETAIL:\r",
            "            Log.note(\"Done\")\r",
            "\r",
            "    def main():\r",
            "        try:\r",
            "            settings = startup.read_settings()\r",
            "            Log.start(settings.debug)\r",
            "\r",
            "            # DO WORK HERE\r",
            "\r",
            "        except Exception as e:\r",
            "            Log.error(\"Complain, or not\", e)\r",
            "        finally:\r",
            "            Log.stop()\r",
            "```\r",
            "\r",
            "This pattern of using explict debug variables allows the programmer to switch logging on and off on individual subsystems that share that variable: Either multiple debug variables in a single module, or multiple modules sharing a single debug variable.\r",
            "\r",
            "These debug variables can be switched on/off by configuration file:\r",
            "\r",
            "```javascript\r",
            "    // settings.json\r",
            "    {\r",
            "        \"debug\":{\r",
            "            \"constants\":{\"simple.DEBUG_SHOW_DETAILS\":false}\r",
            "        }\r",
            "    }\r",
            "```\r",
            "\r",
            "To keep logging to a single line, you may consider this pattern:\r",
            "\r",
            "    DEBUG and Log.note(\"error: {{value}}\", value=expensive_function()) \r",
            "\r",
            "Notice the `expensive_function()` is not run when `DEBUG` is false.\r",
            "\r",
            "## Log Configuration\r",
            "\r",
            "The `mo-logs` library will log to the console by default. ```Log.start(settings)```\r",
            "will redirect the logging to other streams, as defined by the settings:\r",
            "\r",
            " *  **log** - List of all log-streams and their parameters\r",
            " *  **trace** - Show more details in every log line (default False)\r",
            " *  **cprofile** - Used to enable the builtin python c-profiler, ensuring the cprofiler is turned on for all spawned threads. (default False)\r",
            " *  **constants** - Map absolute path of module constants to the values that will be assigned. Used mostly to set debugging constants in modules.\r",
            "\r",
            "Of course, logging should be the first thing to be setup (aside from digesting\r",
            "settings of course). For this reason, applications should have the following\r",
            "structure:\r",
            "\r",
            "```python\r",
            "    def main():\r",
            "        try:\r",
            "            settings = startup.read_settings()\r",
            "            Log.start(settings.debug)\r",
            "\r",
            "            # DO WORK HERE\r",
            "\r",
            "        except Exception as e:\r",
            "            Log.error(\"Complain, or not\", e)\r",
            "        finally:\r",
            "            Log.stop()\r",
            "```\r",
            "\r",
            "Example configuration file\r",
            "\r",
            "```json\r",
            "{\r",
            "    \"log\": [\r",
            "        {\r",
            "            \"class\": \"logging.handlers.RotatingFileHandler\",\r",
            "            \"filename\": \"examples/logs/examples_etl.log\",\r",
            "            \"maxBytes\": 10000000,\r",
            "            \"backupCount\": 100,\r",
            "            \"encoding\": \"utf8\"\r",
            "        },\r",
            "        {\r",
            "            \"log_type\": \"email\",\r",
            "            \"from_address\": \"klahnakoski@mozilla.com\",\r",
            "            \"to_address\": \"klahnakoski@mozilla.com\",\r",
            "            \"subject\": \"[ALERT][DEV] Problem in ETL Spot\",\r",
            "            \"$ref\": \"file://~/private.json#email\"\r",
            "        },\r",
            "        {\r",
            "            \"log_type\": \"console\"\r",
            "        }\r",
            "    ]\r",
            "}\r",
            "```\r",
            "\r",
            "## Capturing logs\r",
            "\r",
            "You can capture all the logging message and send them to your own logging with \r",
            "\r",
            "    Log.set_logger(myLogger)\r",
            "    \r",
            "where `myLogger` is an instance that can accept a calls to `write(template, parameters)`. If your logging library can only handle strings, then use `message = expand_template(template, params)`.\r",
            "\r",
            "\r",
            "## Problems with Python Logging\r",
            "\r",
            "[Python's default `logging` module](https://docs.python.org/2/library/logging.html#logging.debug)\r",
            "comes close to doing the right thing, but fails:  \r",
            "\r",
            "  * It has keyword parameters, but they are expanded at call time so the values are lost in a string.  \r",
            "  * It has `extra` parameters, but they are lost if not used by the matching `Formatter`.  \r",
            "  * It even has stack trace with `exc_info` parameter, but only if an exception is being handled.\r",
            "  * Python 2.x has no builtin exception chaining, but [Python 3 does](https://www.python.org/dev/peps/pep-3134/)\r",
            "\r",
            "### More Reading\r",
            "\r",
            "* **Structured Logging is Good** - https://sites.google.com/site/steveyegge2/the-emacs-problem\r",
            "\r",
            ""
        ],
        "separator": "\n"
    },
    "long_description_content_type": "text/markdown",
    "name": "mo-logs",
    "packages": ["mo_logs"],
    "url": "https://github.com/klahnakoski/mo-logs",
    "version": "3.64.20113",
    "zip_safe": false
}